name: 'Infra Pipeline'
on:
  push:
    paths:
      - 'infra/**'
      - '.github/workflows/infra.yml'
  pull_request:
  workflow_dispatch:

env:
  TF_WORKING_DIR: './infra/terraform'
  BUCKET_NAME: shrillecho-tf-state

jobs:
  create_state_bucket:
    runs-on: ubuntu-latest
    environment: shrillecho
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}/bucket
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Check if bucket exists
      id: check_bucket
      run: bash ../../../scripts/ci/check_s3_exists.sh

    - uses: hashicorp/setup-terraform@v3
      if: steps.check_bucket.outputs.bucket_exists == 'false'
    
    - name: Terraform Init
      if: steps.check_bucket.outputs.bucket_exists == 'false'
      run: terraform init
    
    - name: Create State Bucket
      if: steps.check_bucket.outputs.bucket_exists == 'false'
      run: terraform apply -auto-approve

  terraform:
    needs: create_state_bucket
    runs-on: ubuntu-latest
    environment: shrillecho
    outputs:
      droplet_ip: ${{ steps.droplet_ip.outputs.droplet_ip }} 
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    
    - uses: hashicorp/setup-terraform@v3
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Plan
      run: terraform plan
      env:
        TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
    
    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        TF_VAR_do_token: ${{ secrets.DO_TOKEN }}

    - name: Store Droplet IP
      id: droplet_ip
      run: bash ../../scripts/ci/read_droplet_ip.sh

  configure_vps:
    needs: terraform
    environment: shrillecho
    runs-on: ubuntu-latest
    steps:
      - name: Setup VPS GitHub access
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.terraform.outputs.droplet_ip }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |

            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo \
                "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            fi
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            if [ ! -f ~/.ssh/github_id_rsa ]; then
              mkdir -p ~/.ssh
              ssh-keygen -t rsa -b 4096 -f ~/.ssh/github_id_rsa -N ""
              echo "Host github.com" >> ~/.ssh/config
              echo "  IdentityFile ~/.ssh/github_id_rsa" >> ~/.ssh/config
              echo "  StrictHostKeyChecking no" >> ~/.ssh/config
              cat ~/.ssh/github_id_rsa.pub
            fi

            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            rm -rf shrillecho-playlist-archive
            git clone git@github.com:smwbalfe/shrillecho-playlist-archive.git
            cd shrillecho-playlist-archive/infra

            [ -z "${{ secrets.PRIVKEY_PEM }}" ] && echo "no" > /root/cert.log || echo "yes" > /root/cert.log
            [ -z "${{ secrets.FULLCHAIN_PEM }}" ] && echo "no" >> /root/cert.log || echo "yes" >> /root/cert.log
            
            mkdir -p ./nginx/etc/letsencrypt/live/shrillecho.app

            echo ${{ secrets.PRIVKEY_PEM }} > ./nginx/etc/letsencrypt/live/shrillecho.com/privkey1.pem
            echo ${{ secrets.FULLCHAIN_PEM }} > ./nginx/etc/letsencrypt/live/shrillecho.com/fullchain1.pem

            chmod 600 ./nginx/etc/letsencrypt/live/shrillecho.com/privkey1.pem
            chmod 600 ./nginx/etc/letsencrypt/live/shrillecho.com/fullchain1.pem

            cat > .env.prod << 'EOF'
            REDIS_URL=${{ vars.REDIS_URL }}
            GO_PORT=${{ vars.GO_PORT }}
            POSTGRES_URL=${{ secrets.POSTGRES_URL }}
            SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}
            SUPABASE_DB_PASSWORD=${{ secrets.SUPABASE_DB_PASSWORD }}
            EOF

            sudo systemctl docker start

            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u smwbalfe --password-stdin

            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up