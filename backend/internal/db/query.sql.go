// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (artist_id)
VALUES ($1)
ON CONFLICT (artist_id) DO UPDATE SET artist_id = EXCLUDED.artist_id
RETURNING id
`

func (q *Queries) CreateArtist(ctx context.Context, artistID string) (int64, error) {
	row := q.db.QueryRow(ctx, createArtist, artistID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createScrape = `-- name: CreateScrape :one
INSERT INTO scrapes (user_id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateScrape(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, createScrape, userID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createScrapeArtist = `-- name: CreateScrapeArtist :exec
INSERT INTO scrape_artists (scrape_id, artist_id)
VALUES ($1, $2)
`

type CreateScrapeArtistParams struct {
	ScrapeID int64 `json:"scrape_id"`
	ArtistID int64 `json:"artist_id"`
}

func (q *Queries) CreateScrapeArtist(ctx context.Context, arg CreateScrapeArtistParams) error {
	_, err := q.db.Exec(ctx, createScrapeArtist, arg.ScrapeID, arg.ArtistID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id)
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, id pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, id)
	err := row.Scan(&id)
	return id, err
}

const deleteScrape = `-- name: DeleteScrape :exec
DELETE FROM scrapes
WHERE id = $1
`

func (q *Queries) DeleteScrape(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScrape, id)
	return err
}

const getScrapeArtists = `-- name: GetScrapeArtists :many
SELECT a.id, a.artist_id
FROM artists a
JOIN scrape_artists sa ON sa.artist_id = a.id
WHERE sa.scrape_id = $1
`

func (q *Queries) GetScrapeArtists(ctx context.Context, scrapeID int64) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getScrapeArtists, scrapeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.ArtistID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScrapeByID = `-- name: GetScrapeByID :one
SELECT EXISTS (
    SELECT 1 
    FROM scrapes 
    WHERE id = $1
)
`

func (q *Queries) GetScrapeByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, getScrapeByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserArtists = `-- name: GetUserArtists :many
SELECT DISTINCT 
    a.artist_id
FROM artists a
JOIN scrape_artists sa ON sa.artist_id = a.id
JOIN scrapes s ON s.id = sa.scrape_id
WHERE s.user_id = $1
ORDER BY a.artist_id
`

func (q *Queries) GetUserArtists(ctx context.Context, userID pgtype.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserArtists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var artist_id string
		if err := rows.Scan(&artist_id); err != nil {
			return nil, err
		}
		items = append(items, artist_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT EXISTS (
    SELECT 1 
    FROM users 
    WHERE id = $1
)
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserScrapes = `-- name: GetUserScrapes :one
SELECT DISTINCT a.artist_id
FROM artists a
JOIN scrape_artists sa ON sa.artist_id = a.id
JOIN scrapes s ON s.id = sa.scrape_id
WHERE s.user_id = $1 AND s.id = $2
ORDER BY a.artist_id
`

type GetUserScrapesParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     int64       `json:"id"`
}

func (q *Queries) GetUserScrapes(ctx context.Context, arg GetUserScrapesParams) (string, error) {
	row := q.db.QueryRow(ctx, getUserScrapes, arg.UserID, arg.ID)
	var artist_id string
	err := row.Scan(&artist_id)
	return artist_id, err
}
